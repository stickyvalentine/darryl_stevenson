(define (int_eater l)
  (if (and (> (lslen? l) 2) (integer? (car l)))
      (int_eater (cdr l))
      l))

(define (add+ l)
  (if (and (>1 l) (integer? (car l)))
      (add+ (replace-nth (cdr l)
                         (+ -1 (lslen? (cdr l)))
                         (+ (car l) (tail l))))
      l))

(define (sub+ l)
  (if (and (>1 l) (integer? (car l)))
      (sub+ (replace-nth (cdr l)
                         (+ -1 (lslen? (cdr l)))
                         (- (tail l) (car l))))
      l))

(define (mul+ l)
  (if (and (>1 l) (integer? (car l)))
      (mul+ (replace-nth (cdr l)
                         (+ -1 (lslen? (cdr l)))
                         (* (tail l) (car l))))
      l))

(define (div+ l)
  (if (and (>1 l) (integer? (car l)))
      (div+ (replace-nth (cdr l)
                         (+ -1 (lslen? (cdr l)))
                         (/ (tail l) (car l))))
      l))
